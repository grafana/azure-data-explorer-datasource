---
image_pull_secrets:
  - dockerconfigjson
kind: pipeline
name: test-pr
platform:
  arch: amd64
  os: linux
services:
  - environment:
      GCP_KEY:
        from_secret: gcp_key
    image: grafana/plugin-build-report-service:0.0.5
    name: plugin-build-report-service
steps:
  - commands:
      - if [ -z "$GRABPL_VERSION" ]; then GRABPL_VERSION=2.9.51; fi
      - if [ -z "$DOCKERIZE_VERSION" ]; then DOCKERIZE_VERSION=0.6.1; fi
      - mkdir -p bin
      - curl -fL -o bin/grabpl https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/v$GRABPL_VERSION/grabpl
      - chmod +x bin/grabpl
      - mkdir ci
      - curl -fLO https://github.com/jwilder/dockerize/releases/download/v$${DOCKERIZE_VERSION}/dockerize-linux-amd64-v$${DOCKERIZE_VERSION}.tar.gz
      - tar -C bin -xzvf dockerize-linux-amd64-v$${DOCKERIZE_VERSION}.tar.gz
      - rm dockerize-linux-amd64-v$${DOCKERIZE_VERSION}.tar.gz
      - yarn install --frozen-lockfile --no-progress
      - rm -rf node_modules/@grafana/data/node_modules
    environment:
      GRABPL_VERSION:
        from_secret: grabpl_version
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: initialize
  - commands:
      - if [ -f "./cspell.config.json" ]; then npx --yes cspell -c cspell.config.json "**/*.{ts,tsx,js,go,md,mdx,yml,yaml,json,scss,css}"; fi
    depends_on:
      - initialize
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: spell-check
  - commands:
      - if [ -f "./node_modules/.bin/grafana-toolkit" ]; then ./node_modules/.bin/grafana-toolkit plugin:ci-build; else yarn build; yarn test:ci; fi
    depends_on:
      - initialize
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: build-and-test-frontend
  - commands:
      - mage -v lint
      - mage -v coverage
    depends_on:
      - initialize
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: test-backend
  - commands:
      - mage -v buildAll
    depends_on:
      - test-backend
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: build-backend
  - commands:
      - echo "Starting veracode scan..."
      - apk add curl
      - "# Increase heap size or the scanner will die."
      - export _JAVA_OPTIONS=-Xmx4g
      - mkdir -p ci/jobs/security_scan
      - go mod vendor || true
      - curl -sSL https://download.sourceclear.com/ci.sh | sh -s scan --skip-compile --quick --allow-dirty
      - "##"
      - "# Not failing builds now if we detect items we deem a problem in the scan output, but the following"
      - "# Would be an example"
      - "#"
      - '# grep "High Risk" ci/jobs/security_scan/sourclear_scan.out && false || true'
    depends_on:
      - build-and-test-frontend
      - build-backend
    environment:
      SRCCLR_API_TOKEN:
        from_secret: srcclr_api_token
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: security-scan
  - commands:
      - if [ -f "./node_modules/.bin/grafana-toolkit" ]; then ./node_modules/.bin/grafana-toolkit plugin:ci-build --finish; else yarn build; mkdir -p ci/jobs/package; mv dist ci/jobs/package/; fi
      - ./bin/grabpl plugin package
    depends_on:
      - build-and-test-frontend
      - build-backend
    environment:
      GRAFANA_API_KEY:
        from_secret: grafana_api_key
      PLUGIN_SIGNATURE_TYPE:
        from_secret: plugin_signature_type
      PLUGIN_PRIVATE_ROOT_URLS:
        from_secret: plugin_private_root_urls
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: package
  - commands:
      - ./bin/dockerize -wait tcp://plugin-build-report-service:5432 -timeout 120s
      - ./bin/grabpl plugin create-build-report
    depends_on:
      - initialize
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: create-build-report
  - commands:
      - if [ -z "$GCP_KEY" ]; then echo "Missing GCS Publish Key"; exit -1; fi
      - apt update
      - apt install -y jq git-lfs
      - PLUGIN_NAME=`jq -r .id ci/jobs/package/dist/plugin.json`
      - VERSION=`jq -r .info.version ci/jobs/package/dist/plugin.json`
      - printenv GCP_KEY > /tmp/gcpkey.json
      - gcloud auth activate-service-account --key-file=/tmp/gcpkey.json
      - gsutil -m cp -r ci/packages/** gs://integration-artifacts/$${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/$${DRONE_COMMIT_SHA}
      - gsutil rm -f gs://integration-artifacts/$${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/latest/** || true
      - echo "Copying artifacts to $${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/latest"
      - gsutil -m cp -r ci/packages/** gs://integration-artifacts/$${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/latest
    depends_on:
      - package
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: publish-gcs-artifacts
  - commands:
      - '[ -n "${CRON_E2E_GRAFANA_VERSION}" ] && E2E_GRAFANA_VERSION="${CRON_E2E_GRAFANA_VERSION}" || true'
      - apt update
      - apt install -y jq git-lfs
      - ./bin/grabpl plugin e2etests
    depends_on:
      - package
    environment:
      CRON_E2E_GRAFANA_VERSION:
        from_secret: CRON_E2E_GRAFANA_VERSION
      E2E_GRAFANA_VERSION:
        from_secret: E2E_GRAFANA_VERSION
      GITHUB_TOKEN:
        from_secret: github_token
      GRAFANA_LICENSE_KEY:
        from_secret: license_key
    image: grafana/grafana-plugin-ci-e2e:1.4.1
    name: run-e2e
  - commands:
      - printenv GCP_KEY > /tmp/gcpkey.json
      - gcloud auth activate-service-account --key-file=/tmp/gcpkey.json
      - gsutil cp ci/jobs/package/dist/plugin.json gs://plugins-ci/drone/$${DRONE_REPO}/pull-requests/$${DRONE_PULL_REQUEST}/meta/plugin.json
      - gsutil -m rsync -r ci/packages gs://plugins-ci/drone/$${DRONE_REPO}/pull-requests/$${DRONE_PULL_REQUEST}/packages
      - if [ -d cypress ] && [ -n "$(ls -A cypress/videos)" ]; then gsutil -m rsync -r cypress/videos gs://plugins-ci/drone/$${DRONE_REPO}/pull-requests/$${DRONE_PULL_REQUEST}/artifacts/; fi
      - if [ -d cypress ] && [ -n "$(ls -A cypress/screenshots)" ]; then gsutil -m rsync -r cypress/screenshots gs://plugins-ci/drone/$${DRONE_REPO}/pull-requests/$${DRONE_PULL_REQUEST}/artifacts/; fi
    depends_on:
      - run-e2e
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: upload-artifacts
  - commands:
      - ./bin/dockerize -wait tcp://plugin-build-report-service:5432 -timeout 120s
      - ./bin/grabpl plugin store-stats-and-artifacts
    depends_on:
      - publish-gcs-artifacts
      - upload-artifacts
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: store-stats-and-artifacts
  - commands:
      - if [ -f failed ]; then return 1; else return 0; fi
    depends_on:
      - upload-artifacts
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: check-e2e
  - commands:
      - ./bin/dockerize -wait tcp://plugin-build-report-service:5432 -timeout 120s
      - ./bin/grabpl plugin store-build-report
    depends_on:
      - store-stats-and-artifacts
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: store-build-report
  - commands:
      - ./bin/dockerize -wait tcp://plugin-build-report-service:5432 -timeout 120s
      - ./bin/grabpl plugin store-build-report --failed-pipeline
    depends_on:
      - build-and-test-frontend
      - build-backend
      - test-backend
      - security-scan
      - package
      - publish-gcs-artifacts
      - check-e2e
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: finalize-failed-build-report
    when:
      status:
        - failure
trigger:
  event:
    - pull_request
type: docker

---
image_pull_secrets:
  - dockerconfigjson
kind: pipeline
name: test-main
platform:
  arch: amd64
  os: linux
services:
  - environment:
      GCP_KEY:
        from_secret: gcp_key
    image: grafana/plugin-build-report-service:0.0.5
    name: plugin-build-report-service
steps:
  - commands:
      - if [ -z "$GRABPL_VERSION" ]; then GRABPL_VERSION=2.9.51; fi
      - if [ -z "$DOCKERIZE_VERSION" ]; then DOCKERIZE_VERSION=0.6.1; fi
      - mkdir -p bin
      - curl -fL -o bin/grabpl https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/v$GRABPL_VERSION/grabpl
      - chmod +x bin/grabpl
      - mkdir ci
      - curl -fLO https://github.com/jwilder/dockerize/releases/download/v$${DOCKERIZE_VERSION}/dockerize-linux-amd64-v$${DOCKERIZE_VERSION}.tar.gz
      - tar -C bin -xzvf dockerize-linux-amd64-v$${DOCKERIZE_VERSION}.tar.gz
      - rm dockerize-linux-amd64-v$${DOCKERIZE_VERSION}.tar.gz
      - yarn install --frozen-lockfile --no-progress
      - rm -rf node_modules/@grafana/data/node_modules
    environment:
      GRABPL_VERSION:
        from_secret: grabpl_version
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: initialize
  - commands:
      - if [ -f "./cspell.config.json" ]; then npx --yes cspell -c cspell.config.json "**/*.{ts,tsx,js,go,md,mdx,yml,yaml,json,scss,css}"; fi
    depends_on:
      - initialize
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: spell-check
  - commands:
      - if [ -f "./node_modules/.bin/grafana-toolkit" ]; then ./node_modules/.bin/grafana-toolkit plugin:ci-build; else yarn build; yarn test:ci; fi
    depends_on:
      - initialize
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: build-and-test-frontend
  - commands:
      - mage -v lint
      - mage -v coverage
    depends_on:
      - initialize
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: test-backend
  - commands:
      - mage -v buildAll
    depends_on:
      - test-backend
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: build-backend
  - commands:
      - echo "Starting veracode scan..."
      - apk add curl
      - "# Increase heap size or the scanner will die."
      - export _JAVA_OPTIONS=-Xmx4g
      - mkdir -p ci/jobs/security_scan
      - go mod vendor || true
      - curl -sSL https://download.sourceclear.com/ci.sh | sh -s scan --skip-compile --quick --allow-dirty
      - "##"
      - "# Not failing builds now if we detect items we deem a problem in the scan output, but the following"
      - "# Would be an example"
      - "#"
      - '# grep "High Risk" ci/jobs/security_scan/sourclear_scan.out && false || true'
    depends_on:
      - build-and-test-frontend
      - build-backend
    environment:
      SRCCLR_API_TOKEN:
        from_secret: srcclr_api_token
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: security-scan
  - commands:
      - if [ -f "./node_modules/.bin/grafana-toolkit" ]; then ./node_modules/.bin/grafana-toolkit plugin:ci-build --finish; else yarn build; mkdir -p ci/jobs/package; mv dist ci/jobs/package/; fi
      - ./bin/grabpl plugin package
    depends_on:
      - build-and-test-frontend
      - build-backend
    environment:
      GRAFANA_API_KEY:
        from_secret: grafana_api_key
      PLUGIN_SIGNATURE_TYPE:
        from_secret: plugin_signature_type
      PLUGIN_PRIVATE_ROOT_URLS:
        from_secret: plugin_private_root_urls
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: package
  - commands:
      - ./bin/dockerize -wait tcp://plugin-build-report-service:5432 -timeout 120s
      - ./bin/grabpl plugin create-build-report
    depends_on:
      - initialize
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: create-build-report
  - commands:
      - if [ -z "$GCP_KEY" ]; then echo "Missing GCS Publish Key"; exit -1; fi
      - apt update
      - apt install -y jq git-lfs
      - PLUGIN_NAME=`jq -r .id ci/jobs/package/dist/plugin.json`
      - VERSION=`jq -r .info.version ci/jobs/package/dist/plugin.json`
      - printenv GCP_KEY > /tmp/gcpkey.json
      - gcloud auth activate-service-account --key-file=/tmp/gcpkey.json
      - gsutil -m cp -r ci/packages/** gs://integration-artifacts/$${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/$${DRONE_COMMIT_SHA}
      - gsutil rm -f gs://integration-artifacts/$${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/latest/** || true
      - echo "Copying artifacts to $${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/latest"
      - gsutil -m cp -r ci/packages/** gs://integration-artifacts/$${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/latest
    depends_on:
      - package
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: publish-gcs-artifacts
  - commands:
      - '[ -n "${CRON_E2E_GRAFANA_VERSION}" ] && E2E_GRAFANA_VERSION="${CRON_E2E_GRAFANA_VERSION}" || true'
      - apt update
      - apt install -y jq git-lfs
      - ./bin/grabpl plugin e2etests
    depends_on:
      - package
    environment:
      CRON_E2E_GRAFANA_VERSION:
        from_secret: CRON_E2E_GRAFANA_VERSION
      E2E_GRAFANA_VERSION:
        from_secret: E2E_GRAFANA_VERSION
      GITHUB_TOKEN:
        from_secret: github_token
      GRAFANA_LICENSE_KEY:
        from_secret: license_key
    image: grafana/grafana-plugin-ci-e2e:1.4.1
    name: run-e2e
  - commands:
      - printenv GCP_KEY > /tmp/gcpkey.json
      - gcloud auth activate-service-account --key-file=/tmp/gcpkey.json
      - gsutil cp ci/jobs/package/dist/plugin.json gs://plugins-ci/drone/$${DRONE_REPO}/$${DRONE_BRANCH}/$${DRONE_BUILD_NUMBER}/meta/plugin.json
      - gsutil -m rsync -r ci/packages gs://plugins-ci/drone/$${DRONE_REPO}/$${DRONE_BRANCH}/$${DRONE_BUILD_NUMBER}/packages
      - if [ -d cypress ] && [ -n "$(ls -A cypress/videos)" ]; then gsutil -m rsync -r cypress/videos gs://plugins-ci/drone/$${DRONE_REPO}/$${DRONE_BRANCH}/$${DRONE_BUILD_NUMBER}/artifacts/; fi
      - if [ -d cypress ] && [ -n "$(ls -A cypress/screenshots)" ]; then gsutil -m rsync -r cypress/screenshots gs://plugins-ci/drone/$${DRONE_REPO}/$${DRONE_BRANCH}/$${DRONE_BUILD_NUMBER}/artifacts/; fi
    depends_on:
      - run-e2e
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: upload-artifacts
  - commands:
      - ./bin/dockerize -wait tcp://plugin-build-report-service:5432 -timeout 120s
      - ./bin/grabpl plugin store-stats-and-artifacts
    depends_on:
      - publish-gcs-artifacts
      - upload-artifacts
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: store-stats-and-artifacts
  - commands:
      - if [ -f failed ]; then return 1; else return 0; fi
    depends_on:
      - upload-artifacts
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: check-e2e
  - commands:
      - ./bin/dockerize -wait tcp://plugin-build-report-service:5432 -timeout 120s
      - ./bin/grabpl plugin store-build-report
    depends_on:
      - store-stats-and-artifacts
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: store-build-report
  - commands:
      - ./bin/dockerize -wait tcp://plugin-build-report-service:5432 -timeout 120s
      - ./bin/grabpl plugin store-build-report --failed-pipeline
    depends_on:
      - build-and-test-frontend
      - build-backend
      - test-backend
      - security-scan
      - package
      - publish-gcs-artifacts
      - check-e2e
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: finalize-failed-build-report
    when:
      status:
        - failure
  - commands:
      - if [ -z "$GCP_KEY" ]; then echo "Missing GCS Publish Key"; exit -1; fi
      - apt update
      - apt install -y jq git-lfs
      - PLUGIN_NAME=`jq -r .id ci/jobs/package/dist/plugin.json`
      - VERSION=`jq -r .info.version ci/jobs/package/dist/plugin.json`
      - printenv GCP_KEY > /tmp/gcpkey.json
      - gcloud auth activate-service-account --key-file=/tmp/gcpkey.json
      - gsutil rm -f gs://integration-artifacts/$${PLUGIN_NAME}/$${DRONE_BRANCH}/latest/** || true
      - gsutil -m cp -r ci/packages/** gs://integration-artifacts/$${PLUGIN_NAME}/$${DRONE_BRANCH}/latest
    depends_on:
      - publish-gcs-artifacts
      - check-e2e
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: update-gcs-master-latest
  - commands:
      - PLUGIN_NAME=`jq -r .id ci/jobs/package/dist/plugin.json`
      - integration-bot.js update-enterprise-master $PLUGIN_NAME $DRONE_REPO_NAME
    depends_on:
      - update-gcs-master-latest
    environment:
      GCLOUD_SERVICE_KEY:
        from_secret: gcp_key
      GITHUB_BOT_EMAIL: grafanabot@grafana.com
      GITHUB_BOT_TOKEN:
        from_secret: github_token
      GITHUB_BOT_USER: grafanabot
    image: us.gcr.io/kubernetes-dev/integration-bot:v11
    name: integration-bot-main
trigger:
  branch:
    - master
    - main
  event:
    - push
type: docker

---
image_pull_secrets:
  - dockerconfigjson
kind: pipeline
name: test-cron
platform:
  arch: amd64
  os: linux
services:
  - environment:
      GCP_KEY:
        from_secret: gcp_key
    image: grafana/plugin-build-report-service:0.0.5
    name: plugin-build-report-service
steps:
  - commands:
      - if [ -z "$GRABPL_VERSION" ]; then GRABPL_VERSION=2.9.51; fi
      - if [ -z "$DOCKERIZE_VERSION" ]; then DOCKERIZE_VERSION=0.6.1; fi
      - mkdir -p bin
      - curl -fL -o bin/grabpl https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/v$GRABPL_VERSION/grabpl
      - chmod +x bin/grabpl
      - mkdir ci
      - curl -fLO https://github.com/jwilder/dockerize/releases/download/v$${DOCKERIZE_VERSION}/dockerize-linux-amd64-v$${DOCKERIZE_VERSION}.tar.gz
      - tar -C bin -xzvf dockerize-linux-amd64-v$${DOCKERIZE_VERSION}.tar.gz
      - rm dockerize-linux-amd64-v$${DOCKERIZE_VERSION}.tar.gz
      - yarn install --frozen-lockfile --no-progress
      - rm -rf node_modules/@grafana/data/node_modules
    environment:
      GRABPL_VERSION:
        from_secret: grabpl_version
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: initialize
  - commands:
      - if [ -f "./cspell.config.json" ]; then npx --yes cspell -c cspell.config.json "**/*.{ts,tsx,js,go,md,mdx,yml,yaml,json,scss,css}"; fi
    depends_on:
      - initialize
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: spell-check
  - commands:
      - if [ -f "./node_modules/.bin/grafana-toolkit" ]; then ./node_modules/.bin/grafana-toolkit plugin:ci-build; else yarn build; yarn test:ci; fi
    depends_on:
      - initialize
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: build-and-test-frontend
  - commands:
      - mage -v lint
      - mage -v coverage
    depends_on:
      - initialize
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: test-backend
  - commands:
      - mage -v buildAll
    depends_on:
      - test-backend
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: build-backend
  - commands:
      - echo "Starting veracode scan..."
      - apk add curl
      - "# Increase heap size or the scanner will die."
      - export _JAVA_OPTIONS=-Xmx4g
      - mkdir -p ci/jobs/security_scan
      - go mod vendor || true
      - curl -sSL https://download.sourceclear.com/ci.sh | sh -s scan --skip-compile --quick --allow-dirty
      - "##"
      - "# Not failing builds now if we detect items we deem a problem in the scan output, but the following"
      - "# Would be an example"
      - "#"
      - '# grep "High Risk" ci/jobs/security_scan/sourclear_scan.out && false || true'
    depends_on:
      - build-and-test-frontend
      - build-backend
    environment:
      SRCCLR_API_TOKEN:
        from_secret: srcclr_api_token
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: security-scan
  - commands:
      - if [ -f "./node_modules/.bin/grafana-toolkit" ]; then ./node_modules/.bin/grafana-toolkit plugin:ci-build --finish; else yarn build; mkdir -p ci/jobs/package; mv dist ci/jobs/package/; fi
      - ./bin/grabpl plugin package
    depends_on:
      - build-and-test-frontend
      - build-backend
    environment:
      GRAFANA_API_KEY:
        from_secret: grafana_api_key
      PLUGIN_SIGNATURE_TYPE:
        from_secret: plugin_signature_type
      PLUGIN_PRIVATE_ROOT_URLS:
        from_secret: plugin_private_root_urls
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: package
  - commands:
      - ./bin/dockerize -wait tcp://plugin-build-report-service:5432 -timeout 120s
      - ./bin/grabpl plugin create-build-report
    depends_on:
      - initialize
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: create-build-report
  - commands:
      - if [ -z "$GCP_KEY" ]; then echo "Missing GCS Publish Key"; exit -1; fi
      - apt update
      - apt install -y jq git-lfs
      - PLUGIN_NAME=`jq -r .id ci/jobs/package/dist/plugin.json`
      - VERSION=`jq -r .info.version ci/jobs/package/dist/plugin.json`
      - printenv GCP_KEY > /tmp/gcpkey.json
      - gcloud auth activate-service-account --key-file=/tmp/gcpkey.json
      - gsutil -m cp -r ci/packages/** gs://integration-artifacts/$${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/$${DRONE_COMMIT_SHA}
      - gsutil rm -f gs://integration-artifacts/$${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/latest/** || true
      - echo "Copying artifacts to $${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/latest"
      - gsutil -m cp -r ci/packages/** gs://integration-artifacts/$${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/latest
    depends_on:
      - package
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: publish-gcs-artifacts
  - commands:
      - '[ -n "${CRON_E2E_GRAFANA_VERSION}" ] && E2E_GRAFANA_VERSION="${CRON_E2E_GRAFANA_VERSION}" || true'
      - apt update
      - apt install -y jq git-lfs
      - ./bin/grabpl plugin e2etests
    depends_on:
      - package
    environment:
      CRON_E2E_GRAFANA_VERSION:
        from_secret: CRON_E2E_GRAFANA_VERSION
      E2E_GRAFANA_VERSION:
        from_secret: E2E_GRAFANA_VERSION
      GITHUB_TOKEN:
        from_secret: github_token
      GRAFANA_LICENSE_KEY:
        from_secret: license_key
    image: grafana/grafana-plugin-ci-e2e:1.4.1
    name: run-e2e
  - commands:
      - printenv GCP_KEY > /tmp/gcpkey.json
      - gcloud auth activate-service-account --key-file=/tmp/gcpkey.json
      - gsutil cp ci/jobs/package/dist/plugin.json gs://plugins-ci/drone/$${DRONE_REPO}/cron/$${DRONE_BRANCH}/$${DRONE_BUILD_NUMBER}/meta/plugin.json
      - gsutil -m rsync -r ci/packages gs://plugins-ci/drone/$${DRONE_REPO}/cron/$${DRONE_BRANCH}/$${DRONE_BUILD_NUMBER}/packages
      - if [ -d cypress ] && [ -n "$(ls -A cypress/videos)" ]; then gsutil -m rsync -r cypress/videos gs://plugins-ci/drone/$${DRONE_REPO}/cron/$${DRONE_BRANCH}/$${DRONE_BUILD_NUMBER}/artifacts/; fi
      - if [ -d cypress ] && [ -n "$(ls -A cypress/screenshots)" ]; then gsutil -m rsync -r cypress/screenshots gs://plugins-ci/drone/$${DRONE_REPO}/cron/$${DRONE_BRANCH}/$${DRONE_BUILD_NUMBER}/artifacts/; fi
    depends_on:
      - run-e2e
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: upload-artifacts
  - commands:
      - ./bin/dockerize -wait tcp://plugin-build-report-service:5432 -timeout 120s
      - ./bin/grabpl plugin store-stats-and-artifacts
    depends_on:
      - publish-gcs-artifacts
      - upload-artifacts
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: store-stats-and-artifacts
  - commands:
      - if [ -f failed ]; then return 1; else return 0; fi
    depends_on:
      - upload-artifacts
    image: grafana/grafana-plugin-ci:1.5.1-alpine
    name: check-e2e
  - commands:
      - ./bin/dockerize -wait tcp://plugin-build-report-service:5432 -timeout 120s
      - ./bin/grabpl plugin store-build-report
    depends_on:
      - store-stats-and-artifacts
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: store-build-report
  - commands:
      - ./bin/dockerize -wait tcp://plugin-build-report-service:5432 -timeout 120s
      - ./bin/grabpl plugin store-build-report --failed-pipeline
    depends_on:
      - build-and-test-frontend
      - build-backend
      - test-backend
      - security-scan
      - package
      - publish-gcs-artifacts
      - check-e2e
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: finalize-failed-build-report
    when:
      status:
        - failure
trigger:
  event:
    - cron
type: docker

---
get:
  name: grafana_api_key
  path: infra/data/ci/drone-plugins
kind: secret
name: grafana_api_key

---
get:
  name: gcp_key
  path: infra/data/ci/drone-plugins
kind: secret
name: gcp_key

---
get:
  name: license_key
  path: infra/data/ci/drone-plugins
kind: secret
name: license_key

---
get:
  name: github_token
  path: infra/data/ci/drone-plugins
kind: secret
name: github_token

---
get:
  name: srcclr_api_token
  path: infra/data/ci/drone-plugins
kind: secret
name: srcclr_api_token

---
get:
  name: .dockerconfigjson
  path: secret/data/common/gcr
kind: secret
name: dockerconfigjson

---
kind: pipeline
name: deploy-publish
platform:
  arch: amd64
  os: linux
steps: []
trigger:
  event:
    - promote
  target:
    - publish
type: docker

---
kind: signature
hmac: c935bb22a0dec2076acc86b267da9a03ad2da0f59ceed9695b3a7faccde5ca95

...
